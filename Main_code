%% *START SIMULATION*
 
%Load rock geometry in binary format (digitised)
load('bentheimer150.mat');
 
dim_x = size(bentheimer150,1);
dim_y = size(bentheimer150,2);
dim_z = size(bentheimer150,3);
 
%Make boundary layer solid (1)
new_sample(1:dim_x+2,1:dim_y+2,1:dim_z) = 1;
new_sample(2:(dim_x+1),2:(dim_y+1),1:dim_z) = bentheimer150(1:dim_x,1:dim_y,1:dim_z);
 
sample_ref(1:dim_x+2,1:dim_y+2,1:dim_z) = 1;
sample_ref(2:(dim_x+1),2:(dim_y+1),1:dim_z) = bentheimer150(1:dim_x,1:dim_y,1:dim_z);
 
nx = size(new_sample,1);
ny = size(new_sample,2);
nz = size(new_sample,3);
G1 = cartGrid([nx, ny, nz], [nx, ny, nz]);
 
%% Run fluid solver to obtain initial velocity map through sample
 
%(Insert fluid solver here)
 
%Parameters that store the permeability at each time (time) iteration occurs
flow_props = [];
 
flow_props_update = [0;K2;meanq2;poro2];
flow_props = [flow_props,flow_props_update];
 
%Save initial rock geometry and fluid velocity map
save(['bent150_test5_rad2_xVel2_0.mat'],'xVel2');
save(['bent150_test5_rad2_yVel2_0.mat'],'yVel2');
save(['bent150_test5_rad2_zVel2_0.mat'],'zVel2');
save(['bent150_test5_rad2_geometry_0.mat'],'new_sample');
 
%% Defining Particle parameters
tic
L = R; %grid size (metres per voxel)
radii_ppm = []; %array of all currently flowing particle radii
inj_intervals = 30; %number of times particle "package" injected per pore volume
%save_intervals = 1000; %do not turn on for large simulations (many particles) due to high memory usage
mean_time_step = mean(mean(zvel(zvel>0)))*5;
forbal_rad = 1; %calculate forces when particle point is within forbal_rad voxels aray from nearest solid
 
%run if generating particles from ppm data
%reads meanq and poro data from fluid solver
Particle_gen_ppm;
 
%Determine whether to make X_mid (voxel of particle centre) solid or Sphere_array (all voxels touching particle circumference) solid
if mean_rad >= (L/2)*1e6
    solid_sphere = 1;
else
    solid_sphere = 0;
end
 
max_rad = max(radii_ppm)/(L*1e6); %max radius of all particles in microns
 
%Number_of_Particles = 1; %already exists if run "particl_gen_ppm" first
%Particle_points = 114; %Unit sphere with 'n' vertices that defines it
Particle_points = ceil(2*pi*max_rad);
end_pts = (Particle_points+1)^2 - 2*(Particle_points);
point = 1;
alpha = 0; %Dampening factor for particle rebound (0 = no dampening, 1 = no bounce)
 
%Simulation parameters
scan_size = [152;152;150]; %Input size of CT scan (voxel size)
start_boundary = [scan_size(1)-2*max_rad;scan_size(2)-2*max_rad;1];
Scale = 1; %scaling factor sfor velocity field (m2/s to um2/s)
 
incr_t = ((dim_x*dim_y*dim_z)*L^3*poro2)/(meanq2);
PVI_injected = 1/inj_intervals; %According to number of particles sent through in each package
PVI = 0; %count PVI in increments of packages injected
end_PVI = 6; %end PVI (currently, as per Baghdikian experimental paper)
 
%Looped parameters for particles interacting with velocity field
velocity_sphere_mid = zeros(3,((Particle_points+1)^2 - 2*(Particle_points)));
velocity_p_2 = zeros(3,1);
sz2 = ceil(Number_of_Particles*inj_intervals*end_PVI);
sz3 = 10;
Time_Lapse_Particles_pos(1:3,1:sz2,1:sz3) = NaN; %Overall particle positions
Velocity_matrix(1:3,1:sz2,1:sz3) = NaN; %Overall particle velocities
%Particle_locations(1:8,1:sz2,1:(save_intervals*inj_intervals*end_PVI)) = NaN; %do not turn on for large simulations (many particles) due to high memory usage
cum_time_array(1,1,1:10) = NaN;
Remaining_particles = 0;
Number_of_Particles_cont = Number_of_Particles;
 
%Parameters that terminate the simulation once end of sample is reached
end_boundary = 0;
time_end = 0;
end_repeat = 0;
 
%Parameters that store the particle sizes for visualisation
particle_sizes = [];
toc
%% Electrostatic Force Inputs
%Ask user for electrostatic inclusion
prompt = ['Do you wish to include force balance? (Y/N)' newline];
force_balance = input(prompt, 's');
if force_balance == 'Y'
    
    disp('Hydrodynamic Drag, Buoyancy, Electrostatic and Van der Waals forces activated')
    %Variables for force balance (buoyancy, Van der Waals, Electrostatic, hydrodynamic)
    %Already obtained from flow simulator: mu, rho_fl (rho)
    siz = scan_size; %for f'n to locate nearest solid voxel
    grav_x = -9.81; %m/s^2: gravitational force %2D - add -9.81
    grav_y = 0; %m/s^2: gravitational force
    grav_z = 0; %m/s^2: gravitational force
    rho_fl = 1000; %Kg/m^3: fluid density
    rho_p = density_particle; %Kg/m^3: particle density
    eps = 77; %dielectric constant of fluid/liquid phase (KCl) (oil = 2, water = 78.5)
    eps_w = 78.5; %rel. dielectric constant of water 
    eps_0 = 8.85e-12; %C^2/(J*m) - vacuum dielectric charge
    Na = 6.02e23; %Avogadro's Number (1/mol)
    k_bol = 1.38064852e-23; %m^2*Kg*s^-2*K^-1: Boltzmann constant
    Temp = 298.15; %K: absolute temperature 
    z_val = 1; %no units: valence of electrolyte
    e = 1.602176634e-19; %Coulomb (C) or As (Ampere second): elementary electric charge
    M = 0.1; %Molarity of fluid (e.g. KCl): mol/L
    K_deb = 1/(sqrt((eps_w*eps_0*k_bol*Temp)/(2*(M)^2*e^2*1000*Na))); %m^-1:reciprocal of the Debye length (sensitive to fluid salinity) - 85nm in paper
    psi_01 = 20e-3; %Volts (V): surface potential of suspended particle
    psi_02_ref = -20e-3; %Volts (V): surface potential of grain
    H = 35e-14*10^-7; %erg to Joules...for particles suspended in water. Or 10e-20 Joule? = Kg*m^2*s^-2: Hamaker constant
 
else
    disp('Size exclusion with drag force simulated only')
end
%% Initialise arrays to store particle simulation data
%Use new particle location: Check if falls in solid and if so, bounce-back
%and interpolate velocity at new positions, else, get new velocity straight
%away (flow goes up z axis)
tic
X_mid = zeros(3,1); %Particle position at t (from initialisation)
vel_k_1 = zeros(3,1); %Particle velocity at t-1
X_mid_k_1 = zeros(3,1); %Particle position at t-1
start = 1; %Start of new particle (set of pts) in simulation
total = 0; %Iterate as long as particles are in solid (voxel value = 1)
total_2 = 0; %Bounce back if particles are in solid of another particle
retained_particles = []; %Location of particle retained due to size exclusion
retention_time = []; %Simulation time that particle was retained due to size exclusion
particle_retained = 0; %Number of particles retained due to size exclusion
retained_particles_radius = []; %Radius of particle retained due to size exclusion
stuck_iteration_time = []; %Simulation time that particle was retained due to attractive forces
stuck_iteration_particles = []; %Location of particle retained due to attractive forces
stuck_iteration_radius = []; %Radius of particle retained due to attractive forces
stuck_particle = 0; %Number of particles retained due to attractive forces
repulsion_bounce = 0; %counter for particles bouncing off walls in repulsion (shouldn't happen!)
Sphere_array_k_1 = zeros(3,(Particle_points+1)^2 - 2*(Particle_points));
Sphere_array = zeros(3,(Particle_points+1)^2 - 2*(Particle_points));
bounce_end = 0; %No. of particles stuck due to point iterations > 100 (shou;dn't happen!)
out_end = 0; %No. of particles jumped outside of doman at high vel.
out_d1 = []; %No. of particles jumped outside of domain during d1 bounce-back (should be 0)
out_d2 = []; %No. of particles jumped outside of domain during d2 bounce-back (should be 0)
out_d3 = []; %No. of particles jumped outside of domain during d3 bounce-back (should be 0)
end_particle_time = []; %Time that particle exited the sample at the opposite end of the injection face
end_boundary_particles = []; %Location of exited particle
end_particle_radius = []; %Radius of exited particle
count = 0; %counter for adding on particle locations in 3rd dimension of array
cum_conc = []; %cumulative concentration (ppm) within each PVI increment for plotting
subtract = []; %saves number of particles removed after each PVI due to NaN (retain or ended)
counter = 0;
repulsion_bounce_plot = [];
effluent_plot = [];
%Forces to plot if desired...
Fv_array_cum = [];
Fv_max_incr_PVI = [];
Fv_min_incr_PVI = [];
Fv_ave_incr_PVI = [];
Fe_array_cum = [];
Fe_max_incr_PVI = [];
Fe_min_incr_PVI = [];
Fe_ave_incr_PVI = [];
Solid_matrix = zeros(dim_x+2,dim_y+2,dim_z); %Matrix to sum up particle volume in each voxel to convert to solid after threshold value
solidified = 0; %Number of voxels solidified due to aggregating small particles
IE = []; %Matrix that counts consecutive force-dominated flow to remove oscillation
oscillating_particle = 0; %Number of oscillating particles removed in total
oscillation_time = []; %Simulation time that particle was removed due to oscillating in repuslive system
oscillation_particles = []; %Location of oscillating particle prior to removal
oscillation_radius = []; %Radius of oscillating particle removed
 
toc
%% Initialise first particle package at injection face
%Generate particle "package" at z=1 face of sample 
tic
%Initialise particles and create unit sphere (Sphere_array)
start = 1;
 
%Create a pore geometry matrix using "new_sample" which is updated to
%include particle positions at each time step
new_sample_mid(:,:,:) = new_sample(:,:,:);
 
%Initialise first particle "package" at injection face
Particle_Initialisation_forcebal;
toc
%% MAIN SIMULATION SECTION
%Different simulation termination criteria:
%while end_boundary<=0.7*(Number_of_Particles*inj_intervals*PVI-(stuck_particle+oscillating_particle+particle_retained)) %end time based on No. of particles reaching end
%while flow_props(2,size(flow_props,2))>0 %end time based on k>0
%while PVI <= end_PVI %end time based on pre-set end_PVI
while (PVI <= end_PVI)
    time = 0; %beginning of simulation time (need to x by time_step for real time)
    n = 0; %Increases with time step/slice of Time_Lapse_Particles_pos
    while cum_time <= incr_t*PVI_injected
        tic
        time = 2 + n;
 
        Particles_pos_mid = zeros(3,Number_of_Particles_cont);
        Particles_vel_mid = zeros(3,Number_of_Particles_cont);
        start = 1;
 
        %Reset permcalc sample to only stuck particles
        new_sample_permcalc(:,:,:) = new_sample(:,:,:);
        repulsion_bounce = 0;
        
        %Reset Fv and Fe arrays to append current time step values
        Fv_array_cum = [];
        Fe_array_cum = [];
 
 
        while start<=Number_of_Particles_cont
 
            %Current and previous particle position and current particle velocity
            X_mid(1:3,1) = Time_Lapse_Particles_pos(1:3,start,10);
            X_mid_k_1(1:3,1) = Time_Lapse_Particles_pos(1:3,start,9);
            vel_k_1(1:3,1) = Velocity_matrix(1:3,start,9);   
            
            %Current particle radius
            rad_R = particle_sizes(1,start);
            
            %Check to see if centre of particle has reached end
            if (Time_Lapse_Particles_pos(3,start,10) >= (dim_z - 1 - max_rad))
                end_boundary = end_boundary + 1;
                end_particle_time = [end_particle_time,PVI+(cum_time/incr_t)];
                end_boundary_particles = [end_boundary_particles, X_mid(1:3,1)];
                end_particle_radius = [end_particle_radius, particle_sizes(start)];
                Time_Lapse_Particles_pos(:,start,10) = NaN;
                X_mid(:,1) = NaN;
            end 
            
            skip = 0;
            
            %Check to see if this particle (and its points) are ended or stuck
            if (isnan(X_mid(1,1))==1) 
                skip = 1;
            end
 
            if skip~=1
    %           Generate a sphere of points around the point
                Sphere_array(1,1) = xi(1,1)*rad_R + X_mid(1,1);
                Sphere_array(2,1) = yi(1,1)*rad_R + X_mid(2,1);
                Sphere_array(3,1) = zi(1,1)*rad_R + X_mid(3,1);
                Sphere_array(1,(Particle_points+1)^2 - 2*(Particle_points)) = xi((Particle_points+1),(Particle_points+1))*rad_R + X_mid(1,1);
                Sphere_array(2,(Particle_points+1)^2 - 2*(Particle_points)) = yi((Particle_points+1),(Particle_points+1))*rad_R + X_mid(2,1);
                Sphere_array(3,(Particle_points+1)^2 - 2*(Particle_points)) = zi((Particle_points+1),(Particle_points+1))*rad_R + X_mid(3,1);
 
                Sphere_array_k_1(1,1) = xi(1,1)*rad_R + X_mid_k_1(1,1);
                Sphere_array_k_1(2,1) = yi(1,1)*rad_R + X_mid_k_1(2,1);
                Sphere_array_k_1(3,1) = zi(1,1)*rad_R + X_mid_k_1(3,1);
                Sphere_array_k_1(1,(Particle_points+1)^2 - 2*(Particle_points)) = xi((Particle_points+1),(Particle_points+1))*rad_R + X_mid_k_1(1,1);
                Sphere_array_k_1(2,(Particle_points+1)^2 - 2*(Particle_points)) = yi((Particle_points+1),(Particle_points+1))*rad_R + X_mid_k_1(2,1);
                Sphere_array_k_1(3,(Particle_points+1)^2 - 2*(Particle_points)) = zi((Particle_points+1),(Particle_points+1))*rad_R + X_mid_k_1(3,1);
 
                point = 2;
                for i=2:(Particle_points)
                    for j=1:(Particle_points+1)
 
                        if point <= (end_pts - 1)
 
                            Sphere_array(1,point) = xi(i,j)*rad_R + X_mid(1,1);
                            Sphere_array(2,point) = yi(i,j)*rad_R + X_mid(2,1);
                            Sphere_array(3,point) = zi(i,j)*rad_R + X_mid(3,1);
 
                            Sphere_array_k_1(1,point) = xi(i,j)*rad_R + X_mid_k_1(1,1);
                            Sphere_array_k_1(2,point) = yi(i,j)*rad_R + X_mid_k_1(2,1);
                            Sphere_array_k_1(3,point) = zi(i,j)*rad_R + X_mid_k_1(3,1);
 
                            point = point + 1;
 
 
                        end
                    end
                end
            end
            
 
            if skip ~= 1 && time>10
                %Criteria for particle retention
                %Calculate the total particle movement after 10 timesteps    
                x_1 = Time_Lapse_Particles_pos(1,start,10);
                y_1 = Time_Lapse_Particles_pos(2,start,10);
                z_1 = Time_Lapse_Particles_pos(3,start,10);
 
%                 x_2 = Time_Lapse_Particles_pos(1,start,9);
%                 y_2 = Time_Lapse_Particles_pos(2,start,9);
%                 z_2 = Time_Lapse_Particles_pos(3,start,9);
% 
                x_10 = Time_Lapse_Particles_pos(1,start,1);
                y_10 = Time_Lapse_Particles_pos(2,start,1);
                z_10 = Time_Lapse_Particles_pos(3,start,1);
 
                %dist1 = sqrt((x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2);
                %dist9 = sqrt((x_1-x_9)^2+(y_1-y_9)^2+(z_1-z_9)^2);
                dist10 = sqrt((x_1-x_10)^2+(y_1-y_10)^2+(z_1-z_10)^2);
                
                %Calculate cumulative time taken between 10 timesteps
                delta_t = 0;
                delta_t = cum_time_array(1,1,10) - cum_time_array(1,1,1);
 
                if dist10 < 0.001*delta_t*rad_R
                %if abs((dist1 - dist10)) < (1e-2)*rad_R*L
                    disp('Particle retained')
                    disp((dist10));
                    %counter = counter + 1;
                    retention_time = [retention_time,PVI+(cum_time/incr_t)];
                    retained_particles = [retained_particles, X_mid];
                    retained_particles_radius = [retained_particles_radius, particle_sizes(start)];
 
                    if solid_sphere == 1
                        for p=1:end_pts
                            new_sample(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                            new_sample_mid(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                            %Add new stuck particles to permcalc sample
                            new_sample_permcalc(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                        end
                        
                        %Run fluid solver to update velocity field
                        %(insert fluid solver here);
                    end
                    if solid_sphere == 0
                        %Add volume of particle of corresonding voxel in Solid_matrix
                        Solid_matrix(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = Solid_matrix(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) + ((4/3)*pi*rad_R^3);
                        %Set particle to solid - become part of geometry - if corresponding voxel in Solid_matrix is over a volume threshold
                        if Solid_matrix(round(X_mid(1)),round(X_mid(2)),round(X_mid(3)))>=0.5
                            new_sample(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = 1;
                            new_sample_mid(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = 1;
                            %Add new stuck particles to permcalc sample
                            new_sample_permcalc(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = 1; 
 
                            solidified = solidified + 1
                            %Run fluid solver to update velocity field
                            %(insert fluid solver here)
                        end
                    end
                    %Set values to NaN to skip in following iterations
                    X_mid(:,1) = NaN;
 
                    skip = 1;
                    particle_retained = particle_retained + 1;
 
                end 
            end
 
            %face = 0;
 
            if skip ~= 1
                
                %Reset total and value counter
                total = 0;
                total_2 = 0;
                value = 0;
                value_2 = 0;
                repeat = 0;
 
                %Reset new_sample_mid by removing previous particle position to prepare reallocate to new position at end
                for s=1:end_pts
                    new_sample_mid(round(Sphere_array_k_1(1,s)),round(Sphere_array_k_1(2,s)),round(Sphere_array_k_1(3,s))) = 0;
                end
                    
                %Check if any of the points of the particle lie in a solid
                %(original + stuck particles + other free-flowing particles)
                for i=1:end_pts
                    if new_sample_mid(round(Sphere_array(1,i)),round(Sphere_array(2,i)),round(Sphere_array(3,i))) == 1 %solid
                        value = 1;
                    else
                        value = 0;
                    end
                    total = total + value;
                end
 
                %Check if any points of the particles lie in solid
                %(original + stuck particles)
                for i=1:end_pts
                    if new_sample(round(Sphere_array(1,i)),round(Sphere_array(2,i)),round(Sphere_array(3,i))) == 1 %solid
                        value_2 = 1;
                    else
                        value_2 = 0;
                    end
                    total_2 = total_2 + value_2;
                end
 
                %Particle hits another particle -> Bounceback
%                 if total > 0 && total_2 == 0
% 
%                     Particle_Bounce_Iteration_redarray_fixed;
% 
%                 end
 
                %Particle hits pore wall -> stick (attraction) or bounce_count (repulsion)
                if total > 0 && total_2 > 0
 
                    Particle_Bounce_Iteration_redarray_fixed;
 
                    %Convert particle to solid when attaches to pore wall (attractive forces)
                    if force_balance == 'Y' && (psi_01*psi_02_ref)<0
                        disp('Particle stuck to wall - attraction');
                        stuck_particle = stuck_particle + 1;
 
                        stuck_iteration_time = [stuck_iteration_time,PVI+(cum_time/incr_t)];
                        stuck_iteration_particles = [stuck_iteration_particles, X_mid];
                        stuck_iteration_radius = [stuck_iteration_radius, particle_sizes(start)];
 
                        if solid_sphere == 1
                            for p=1:end_pts
                                new_sample(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                                new_sample_mid(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                                %Add new stuck particles to permcalc sample
                                new_sample_permcalc(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                            end
                            
                            %Run fluid solver to update velocity field
                            %(insert fluid solver here)
                        end
                        if solid_sphere == 0
                            %Add volume of particle of corresonding voxel in Solid_matrix
                            Solid_matrix(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = Solid_matrix(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) + ((4/3)*pi*rad_R^3);
                            %Set particle to solid - become part of geometry - if corresponding voxel in Solid_matrix is over a volume threshold
                            if Solid_matrix(round(X_mid(1)),round(X_mid(2)),round(X_mid(3)))>=0.5
                                new_sample(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = 1;
                                new_sample_mid(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = 1;
                                %Add new stuck particles to permcalc sample
                                new_sample_permcalc(round(X_mid(1)),round(X_mid(2)),round(X_mid(3))) = 1; 
 
                                solidified = solidified + 1
                                %Run fluid solver to update velocity field
                                %(insert fluid solver here)
                            end
                        end
 
                        X_mid(1:3,1) = NaN;
 
                        skip = 1;
                        total = 0;
                        total_2 = 0;
 
                    end
 
                    if force_balance == 'Y' && (psi_01*psi_02)>0
                        repulsion_bounce = repulsion_bounce + 1;
                    end
 
                    if (repeat == 100) || (out1 > 0) || (bounce > 100)
                        disp('Too many iterations - let x,y,z = NaN');
                        end_repeat = end_repeat + 1;
 
                        stuck_iteration_time = [stuck_iteration_time,PVI+(cum_time/incr_t)];
                        stuck_iteration_particles = [stuck_iteration_particles, X_mid];
                        stuck_iteration_radius = [stuck_iteration_radius, particle_sizes(start)];
 
                        for p=1:end_pts
                            new_sample(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                            new_sample_mid(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                            %Add new stuck particles to permcalc sample
                            new_sample_permcalc(round(Sphere_array_k_1(1,p)),round(Sphere_array_k_1(2,p)),round(Sphere_array_k_1(3,p))) = 1;
                        end
 
                        X_mid(1:3,1) = NaN;
 
                        skip = 1;
                        total = 0;
                        total_2 = 0;
                        out1 = 0;
 
                        %UPDATE VELOCITY FIELD AND CALC NEW PERM(K) HERE
                        %(insert fluid solver here);
                    end
 
                end
 
                if (total == 0) && (skip ~= 1) %&& (face == 0)
                    %Turn X_mid to solid
                    for s=1:end_pts
                        new_sample_mid(round(Sphere_array(1,s)),round(Sphere_array(2,s)),round(Sphere_array(3,s))) = 1;
                    end
                end
 
                %no solid detected so determine velocities at new location directly
                if (total == 0) && (skip ~= 1) %|| (face == 1))
                    
                    %Check force balance and adjust particle location
                    if force_balance == 'Y' %turn on force balance for small particles
                        Force_Balance5;
                    end
 
                    x_2_up = round(X_mid(1,1))+1;
                    x_2_down = round(X_mid(1,1));
                    y_2_up = round(X_mid(2,1))+1;
                    y_2_down = round(X_mid(2,1));
                    z_2_up = round(X_mid(3,1))+1;
                    z_2_down = round(X_mid(3,1));
 
                    v_x_2_up = xvel(x_2_up, y_2_down, z_2_down).*Scale;
                    if abs(v_x_2_up)==Inf
                        v_x_2_up = 0;
                    end
                    v_x_2_down = xvel(x_2_down, y_2_down, z_2_down).*Scale;
                    if abs(v_x_2_down)==Inf
                        v_x_2_down = 0;
                    end
                    v_y_2_up = yvel(x_2_down, y_2_up, z_2_down).*Scale;
                    if abs(v_y_2_up)==Inf
                        v_y_2_up = 0;
                    end
                    v_y_2_down = yvel(x_2_down, y_2_down, z_2_down).*Scale;
                    if abs(v_y_2_down)==Inf
                        v_y_2_down = 0;
                    end
                    v_z_2_up = zvel(x_2_down, y_2_down, z_2_up).*Scale;
                    if abs(v_z_2_up)==Inf
                        v_z_2_up = 0;
                    end
                    v_z_2_down = zvel(x_2_down, y_2_down, z_2_down).*Scale;
                    if abs(v_z_2_down)==Inf
                        v_z_2_down = 0;
                    end
 
                    v_x_2 = (v_x_2_up - v_x_2_down)*(X_mid(1,1) - (x_2_down - 0.5)) + v_x_2_down;
                    v_y_2 = (v_y_2_up - v_y_2_down)*(X_mid(2,1) - (y_2_down - 0.5)) + v_y_2_down;
                    v_z_2 = (v_z_2_up - v_z_2_down)*(X_mid(3,1) - (z_2_down - 0.5)) + v_z_2_down;
 
                    velocity_p_2 = [v_x_2; v_y_2; v_z_2];
                    
                    %Adjust velocity due to force balance
                    if force_balance == 'Y'
                        velocity_p_2 = [v_x_2 + Ux_forces_total; v_y_2 + Uy_forces_total; v_z_2 + Uz_forces_total];
                        Fv_array_cum = [Fv_array_cum, abs((1/(6*pi*mu*(rad_R*L)))*Fv)];
                        Fe_array_cum = [Fe_array_cum, abs((1/(6*pi*mu*(rad_R*L)))*Fe)];
                        if force == 1
                            IE(start) = IE(start) + force;
                        else
                            IE(start) = 0;
                        end
                    end
 
                    skip = 1;
                    face = 0;
                end
                
                %Remove oscillating particle - force acted on it x consecutive times
                if force_balance == 'Y' && IE(start)>=21
                    %Do not make voxel solid nor update velocity field
                    disp('Particle oscillating - turn solid');
                    oscillating_particle = oscillating_particle + 1;
 
                    oscillation_time = [oscillation_time,PVI+(cum_time/incr_t)];
                    oscillation_particles = [oscillation_particles, X_mid];
                    oscillation_radius = [oscillation_radius, particle_sizes(start)];
 
                    X_mid(1:3,1) = NaN;
 
                    skip = 1;
                    total = 0;
                    total_2 = 0;
                end
                
            end
 
            Particles_pos_mid(1:3,start) = X_mid(1:3,1);
            Particles_vel_mid(1:3,start) = velocity_p_2(1:3,1);
 
            start = start + 1;
 
        end
        
        t1 = toc;
        
        cum_time_array(1,1,1:9) = cum_time_array(1,1,2:10);
        cum_time_array(1,1,10) = NaN;
        
        Time_Lapse_Particles_pos(:,1:Number_of_Particles_cont,1:9) = Time_Lapse_Particles_pos(:,1:Number_of_Particles_cont,2:10);
        Time_Lapse_Particles_pos(:,:,10) = NaN;
 
        Velocity_matrix(:,1:Number_of_Particles_cont,1:9) = Velocity_matrix(:,1:Number_of_Particles_cont,2:10);
        Velocity_matrix(:,:,10) = NaN;
 
        Velocity_matrix(1:3,1:Number_of_Particles_cont,9) = Particles_vel_mid(1:3,1:Number_of_Particles_cont);
 
        %Calculate maximum time_step allowable for 1 voxel movemnt based on velocities extracted
        max_vel = max(max(abs(Velocity_matrix(:,1:Number_of_Particles_cont,9))));
        time_step = 1*(L/max_vel);
        cum_time = cum_time + time_step
        cum_time_array(1,1,10) = cum_time;
 
        %Only multiply by vel vector to get new pos if x,y,z not equal to NaN
        for i=1:Number_of_Particles_cont
            if (isnan(Particles_pos_mid(1,i))==0) %||(Particles_pos_mid(1,i)~=2 && Particles_pos_mid(2,i)~=2 && Particles_pos_mid(3,i)~=2)
 
                movement(1:3,i) = (Particles_vel_mid(1:3,i) * time_step)/L;
                Particles_pos_mid(1:3,i) = Particles_pos_mid(1:3,i) + movement(1:3,i);
 
            end
        end
 
        %New particle position added to 3rd Dimention (new slice)
        Time_Lapse_Particles_pos(1:3,1:Number_of_Particles_cont,10) = Particles_pos_mid(1:3,1:Number_of_Particles_cont);
 
%         %Save particle locations every nth (preset) time step for visualisaton
%         %do not turn on for large simulations (many particles) due to high memory usage
%         if rem(time,floor(((incr_t*PVI_injected)/mean_time_step)/save_intervals))==0
%             count = count + 1;
%             Particle_locations(1:3,1:Number_of_Particles_cont,count) = Time_Lapse_Particles_pos(1:3,1:Number_of_Particles_cont,9);
%             Particle_locations(4,1:Number_of_Particles_cont,count) = particle_sizes(1,1:Number_of_Particles_cont);
%             if particle_retained > 0
%                 Particle_locations(5:7,Number_of_Particles_cont+1:Number_of_Particles_cont+particle_retained,count) = retained_particles(1:3,1:particle_retained);
%                 Particle_locations(8,Number_of_Particles_cont+1:Number_of_Particles_cont+particle_retained,count) = retained_particles_radius(1,1:particle_retained);
%             end
%             if stuck_particle > 0
%                 Particle_locations(9:11,Number_of_Particles_cont+particle_retained+1:Number_of_Particles_cont+particle_retained+stuck_particle,count) = stuck_iteration_particles(1:3,1:stuck_particle);
%                 Particle_locations(12,Number_of_Particles_cont+particle_retained+1:Number_of_Particles_cont+particle_retained+stuck_particle,count) = stuck_iteration_radius(1,1:stuck_particle);
%             end
%             if oscillating_particle > 0
%                 Particle_locations(13:15,Number_of_Particles_cont+particle_retained+stuck_particle+1:Number_of_Particles_cont+particle_retained+stuck_particle+oscillating_particle,count) = oscillation_particles(1:3,1:oscillating_particle);
%                 Particle_locations(16,Number_of_Particles_cont+particle_retained+stuck_particle+1:Number_of_Particles_cont+particle_retained+stuck_particle+oscillating_particle,count) = oscillation_radius(1,1:oscillating_particle);
%             end
%         end
        
        n = n+1;
        toc
        t2 = toc;
 
    end
 
    %Increase PVI increment
    PVI = PVI + PVI_injected;
    
    %Update permeability (with particles)
    %Run fluid solver to calculate permeability of updated sample geometry
    %(insert fluid solver here);
    flow_props_update = [PVI;K;meanq;poro];
    flow_props = [flow_props,flow_props_update];
    
    disp('One incremental PVI complete');
    
    %Save Time_Lapse and x,y,z velocities
    save(['bent150_test5_rad2_xVel2_' num2str(PVI) '.mat'],'xVel2');
    save(['bent150_test5_rad2_yVel2_' num2str(PVI) '.mat'],'yVel2');
    save(['bent150_test5_rad2_zVel2_' num2str(PVI) '.mat'],'zVel2');
    save(['bent150_test5_rad2_geometry_' num2str(PVI) '.mat'],'new_sample');
    save(['bent150_test5_rad2_particle_sizes_' num2str(PVI) '.mat'],'particle_sizes');
    
    %Delete previous particle positions and velocities to restart in new
    %matrix with additional particles injected
    Time_Lapse_Particles_pos(:,:,1:8) = NaN;
    Velocity_matrix(:,:,1:8) = NaN;
    
    %Let remaining particles be captured in ongoing Time_Lapse_Particles_pos and Velocity_matrix
    i=Number_of_Particles_cont;
    sub = 0;
    while i>0
        
        if isnan(Time_Lapse_Particles_pos(1,i,10))==1
            Time_Lapse_Particles_pos(:,i,:)=[];
            Velocity_matrix(:,i,:)=[];
            particle_sizes(i)=[];
            if force_balance == 'Y'
                IE(i)=[];
            end
            sub = sub + 1;
        end
        i = i - 1;
    end
    
    subtract = [subtract,[PVI;sub]];
    
   %Check number of particles remaining 
    Remaining_particles = size(particle_sizes,2);
    start = Remaining_particles + 1;
    
    %New number of particles
    Number_of_Particles_cont = Number_of_Particles + Remaining_particles;
    
    %Re-run particle initialisation to obtain new particles to inject at z=1
    %This step also includes using new_sample with captured particles going forward
    Particle_Initialisation_forcebal;
    
    %Plot k/k0 vs PVI
    iterations = size(flow_props,2);
    figure(27);
    plot(flow_props(1,1:iterations),flow_props(2,1:iterations)/flow_props(2,1));
    xlim auto;
    ylim([0 1]);
    grid on;
    
    %Plot retained/stuck z frequency along sample dim_z
    distance_travelled1 = [];
    distance_travelled2 = [];
    distance_travelled3 = [];
    i = 1;
    while i<=size(stuck_iteration_particles,2)
        distance_travelled1 = [distance_travelled1,stuck_iteration_particles(3,i)];
        i = i + 1;
    end
    i = 1;
    while i<=size(retained_particles,2)
        distance_travelled2 = [distance_travelled2,retained_particles(3,i)];
        i = i + 1;
    end
    i = 1;
    while i<=size(oscillation_particles,2)
        distance_travelled3 = [distance_travelled3,oscillation_particles(3,i)];
        i = i + 1;
    end
    figure(28);
    histogram(distance_travelled1,0.5:1:154.5);
    hold on
    histogram(distance_travelled2,0.5:1:154.5);
    hold on
    histogram(distance_travelled3,0.5:1:154.5);
    hold off
    
    %Plot cumulative effluent concentration vs PVI injected
    cum_vol2 = 0;
    for i=1:end_boundary
        if end_particle_time(1,i)<= PVI && end_particle_time(1,i)>= PVI - PVI_injected
            rad = end_particle_radius(1,i)*L; %particle radius in metres
            volume2 = (4/3)*pi*(rad)^3; %particle volume in m^3
            cum_vol2 = cum_vol2 + volume2; %cumulative volume of all particles in time increment
        end
    end
    concentration = (cum_vol2*density_particle*1000)/vol_sample_m; %concentration of particles (ppm)
    conc = [PVI;concentration];
    if PVI>PVI_injected
        conc(2,1) = conc(2,1) + cum_conc(2,end);
        cum_conc = [cum_conc, conc];
    else
        cum_conc = [cum_conc, conc];
    end
    figure(29);
    plot(cum_conc(1,1:end),cum_conc(2,1:end));
    
    figure(30)
    effluent_ratio = [PVI;(end_boundary/(Number_of_Particles*inj_intervals*PVI-(stuck_particle+oscillating_particle+particle_retained)))*100];
    effluent_plot = [effluent_plot, effluent_ratio];
    plot(effluent_plot(1,1:end),effluent_plot(2,1:end));
    xlim auto;
    ylim([0 100]);
    
end
 
%Save final flow properties and particle retention/stuck locations and sizes
save(['bent150_test5_rad2_flow_props_' num2str(PVI) '.mat'],'flow_props');
save(['bent150_test5_rad2_retained_particles_' num2str(PVI) '.mat'],'retained_particles');
save(['bent150_test5_rad2_retained_particles_radius_' num2str(PVI) '.mat'],'retained_particles_radius');
save(['bent150_test5_rad2_stuck_iteration_particles_' num2str(PVI) '.mat'],'stuck_iteration_particles');
save(['bent150_test5_rad2_stuck_iteration_radius_' num2str(PVI) '.mat'],'stuck_iteration_radius');

